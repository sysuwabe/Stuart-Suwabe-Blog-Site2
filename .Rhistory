x15 <- read_excel("~/Downloads/Map the Meal Gap Data/MMG2017_2015Data_ToShare.xlsx", sheet = "2015 County")
x15 <- x15 %>% rename(insecure_percen = `2015 Food Insecurity Rate`)
x14 <- read_excel("~/Downloads/Map the Meal Gap Data/MMG2016_2014Data_ToShare.xlsx", sheet = "2014 County")
x14 <- x14 %>% rename(insecure_percen = `2014 Food Insecurity Rate`)
x13 <- read_excel("~/Downloads/Map the Meal Gap Data/MMG2015_2013Data_ToShare.xlsx", sheet = "2013 County")
x13 <- x13 %>% rename(insecure_percen = `2013 Food Insecurity Rate`)
x12 <- read_excel("~/Downloads/Map the Meal Gap Data/MMG2014_2012Data_ToShare.xlsx", sheet = "2012 County")
x12 <- x12 %>% rename(insecure_percen = `2012 Food Insecurity Rate`)
x11 <- read_excel("~/Downloads/Map the Meal Gap Data/MMG2013_2011Data_ToShare.xlsx", sheet = "2011 County")
x11 <- x11 %>% rename(insecure_percen = `2011 Food Insecurity Rate`)
x10 <- read_excel("~/Downloads/Map the Meal Gap Data/MMG2012_2010Data_ToShare.xlsx", sheet = "County")
x10 <- x10 %>% rename(insecure_percen = `2010 Food Insecurity Rate`)
plot(SCfoodin$insecure_percen)
View(x19)
x19 <- x19[c(1:4)] %>% filter(State == "CA")
x19$pantry_num <- c(20,20,15,49,15,6,54,8,12,41,8,16,13,17,30,28,38,7,30,10,11,3,10,8,4,11,30,9,10,95,33,9,41,37,6,111,39,30,42,42,12,53,25,13,11,5,5,25,16,30,14,3,4,21,11,190,60,12)
View(x19)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
census_api_key("41dcf38aad5e9257d3d377a226d8f5ce88274d23", install = TRUE)
PubTransBelPov <- gets_acs(geography = "county", variables = "B08122_014", state = "CA", year = 2019)
PubTransBelPov <- get_acs(geography = "county", variables = "B08122_014", state = "CA", year = 2019)
View(PubTransBelPov)
PubTransBelPov <- get_acs(geography = "county", variables = "B08122_014", state = "CA", year = 2019)
PubTransBelPov1 <- PubTransBelPov %>% rename(`County, State` = NAME, estimate = PubTransBelPov) %>% select(county, PubTransBelPov)
PubTransBelPov1 <- PubTransBelPov %>% rename(county = NAME, PubTransBelPov = estimate) %>% select(county, PubTransBelPov)
View(PubTransBelPov1)
FoodAssist <- get_acs(geography = "county", variables = "B09010_002", state = "CA", year = 2019)
FoodAssist1 <- FoodAssist %>% rename(county = NAME, estimate = FoodAssist) %>% select(county, PubTransBelPov)
View(FoodAssist)
FoodAssist1 <- FoodAssist %>% rename(county = NAME, estimate = FoodAssist) %>% select(county, FoodAssist)
FoodAssist1 <- FoodAssist %>% rename(county = NAME, FoodAssist = estimate) %>% select(county, FoodAssist)
IncomePovBelow <- get_acs(geography = "county", variables = "B17012_002", state = "CA", year = 2019)
IncomePovBelow1 <- IncomePovBelow %>% rename(county = NAME, IncomePovBelow = estimate) %>% select(county, IncomePovBelow)
EduHSBelow <- get_acs(geography = "county", variables = "B06009_002", state = "CA", year = 2019)
EduHSBelow1 <- EduHSBelow %>% rename(county = NAME, EduHSBelow = estimate) %>% select(county, EduHSBelow)
NoFoodAssist <- get_acs(geography = "county", variables = "B09010_008", state = "CA", year = 2019)
NoFoodAssist1 <- FoodAssist %>% rename(county = NAME, NoFoodAssist = estimate) %>% select(county, NoFoodAssist)
MEDIAN EARNINGS IN THE PAST 12 MONTHS (IN 2019 INFLATION-ADJUSTED DOLLARS) BY SEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER
PLACE OF BIRTH BY EDUCATIONAL ATTAINMENT IN THE UNITED STATES
View(EduHSBelow1)
EduHSBelow <- get_acs(geography = "county", variables = "B20004_002", state = "CA", year = 2019)
EduHSBelow1 <- EduHSBelow %>% rename(county = NAME, EduHSBelow = estimate) %>% select(county, EduHSBelow)
MEDIAN EARNINGS IN THE PAST 12 MONTHS (IN 2019 INFLATION-ADJUSTED DOLLARS) BY SEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER
PLACE OF BIRTH BY EDUCATIONAL ATTAINMENT IN THE UNITED STATES
View(EduHSBelow1)
EduHSBelow <- get_acs(geography = "county", variables = "B06009_002", state = "CA", year = 2019)
EduHSBelow1 <- EduHSBelow %>% rename(county = NAME, EduHSBelow = estimate) %>% select(county, EduHSBelow)
View(EduHSBelow1)
EduHSGrad <- get_acs(geography = "county", variables = "B06009_003", state = "CA", year = 2019)
EduHSGrad1 <- EduHSGrad %>% rename(county = NAME, EduHSGrad = estimate) %>% select(county, EduHSGrad)
EduSomeCol <- get_acs(geography = "county", variables = "B06009_004", state = "CA", year = 2019)
EduSomeCol1 <- EduSomeCol %>% rename(county = NAME, EduSomeCol = estimate) %>% select(county, EduSomeCol)
EduBach <- get_acs(geography = "county", variables = "B06009_005", state = "CA", year = 2019)
EduBach1 <- EduBach %>% rename(county = NAME, EduBach = estimate) %>% select(county, EduBach)
x19test <- x19 %>% rename(county = `County, State`)
x19 test2 <- merge(x19test, PubTransBelPov1, by = county)
x19test <- x19 %>% rename(county = `County, State`)
x19test2 <- merge(x19test, PubTransBelPov1, by = county)
x19test <- x19 %>% rename(county = `County, State`)
x19test2 <- merge(x19test, PubTransBelPov1, by = "county")
View(x19test2)
x19test <- x19 %>% rename(county = `County, State`)
x19test2 <- merge(x19test, PubTransBelPov1, by = "county")
x19test3 <- merge(x19test2, FoodAssist1, by = "county")
x19test4 <- merge(x19test3, NoFoodAssist1, by = "county")
x19test5 <- merge(x19test4, IncomePovBelow1, by = "county")
x19test6 <- merge(x19test5, EduHSBelow1, by = "county")
x19test7 <- merge(x19test6, EduHSGrad1, by = "county")
x19test8 <- merge(x19test7, EduSomeCol1, by = "county")
x19test9 <- merge(x19test8, EduBach1, by = "county")
View(x19test9)
View(foodin2)
library(readxl)
foodin19 <- read_excel("~/Downloads/Map the Meal Gap Data/MMG2021_2019Data_ToShare.xlsx", sheet = "2019 County")
foodin19a <- foodin19 %>% rename(county = `County, State`, insecure_percen = `2019 Food Insecurity Rate`, insecure_num = `# of Food Insecure Persons in 2019`, insecure_low_income = `% FI â‰¤ Low Threshold`, insecure_btwn_income = `% FI Btwn Thresholds`, insecure_high_income = `% FI > High Threshold`, insecure_child_percen = `2019 Child food insecurity rate`, insecure_child_num = `# of Food Insecure Children in 2019`, child_below_poverty_percen = `% food insecure children in HH w/ HH incomes below 185 FPL in 2019`, child_above_poverty_percen = `% food insecure children in HH w/ HH incomes above 185 FPL in 2019`, secure_meal_value = `2019 Cost Per Meal`)  %>% filter(State == "CA") %>% mutate(population = round(insecure_num / insecure_percen, digits = 0))
View(foodin19a)
foodin19x <- foodin19a[-c(1:2,6:9,11)]
View(foodin19x)
foodin19x <- foodin19a[-c(1:2,6:9,11,18)]
foodinT <- merge(foodin19x, x19test9, by = "county")
View(foodinT)
View(vari)
foodinT <- foodinT[-c(12,13)]
foodin19x <- foodin19a[-c(1:2,6:9,11,18)]
foodinT <- merge(foodin19x, x19test9, by = "county")
foodinT <- foodinT[-c(12,13,18)]
foodin19x <- foodin19a[-c(1:2,6:9,11,18)]
foodinT <- merge(foodin19x, x19test9, by = "county")
foodinT <- foodinT[-c(12:14,18)]
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidymodels)
library(tidyverse)
wine = read_rds("pinot.rds") %>%
select(-taster_name) %>%
mutate(year_f = as.factor(year)) %>%
mutate(cherry = str_detect(description,"cherry")) %>%
mutate(chocolate = str_detect(description,"chocolate")) %>%
mutate(earth = str_detect(description,"earth")) %>%
mutate(lprice = log(price)) %>%
select(-description, -price)
glimpse(wine)
set.seed(504)
data_split <- initial_split(wine, prop = 3/4)
train <- training(data_split)
test  <- testing(data_split)
wine_rec <-
recipe(lprice ~ ., data = train) %>%
step_BoxCox(all_numeric(), -all_outcomes()) %>%
step_interact(terms = ~ province:year) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%  # dummy variables for all factor/character/logical columns except for the outcome
step_zv(all_predictors()) # remove all zero variance predictors (i.e. low frequency dummies)
lm_spec <-
linear_reg() %>%
set_engine("lm")
wine_wflow <-
workflow() %>%
add_model(lm_spec) %>%
add_recipe(wine_rec)
wine_wflow
wine_fit <- fit(wine_wflow, train)
wine_fit %>% ## display results
pull_workflow_fit() %>%
tidy()
wine_pred <- predict(wine_fit, test %>% select(-lprice))
head(wine_pred)
wine_results <- bind_cols(wine_pred, test %>% select(lprice))
head(wine_results)
ggplot(wine_results, aes(x = lprice, y = .pred)) +
# Create a diagonal line:
geom_abline(lty = 2) +
geom_point(alpha = 0.5) +
labs(y = "Predicted log Sale Price", x = "log Sale Price") +
# Scale and size the x- and y-axis uniformly:
coord_obs_pred()
wine_metrics <- metric_set(rmse, rsq, mae)
wine_metrics(wine_results, truth = lprice, estimate = .pred)
#subsampling spec
wine_folds <- vfold_cv(train, v = 2)
#recipes
basic_rec <-
recipe(lprice ~ ., data = train) %>%
step_dummy(all_nominal(), -all_outcomes())
complicated_rec <-
recipe(lprice ~ ., data = train) %>%
step_BoxCox(all_numeric(), -all_outcomes()) %>%
step_interact(~ province:year) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%  # dummy variables for all factor/character/logical columns except for the outcome
step_zv(all_predictors()) # remove all zero variance predictors (i.e. low frequency dummies)
lm_spec <-
linear_reg() %>%
set_engine("lm")
dt_spec <-
decision_tree(
cost_complexity = tune(),
tree_depth = tune()
) %>%
set_engine("rpart") %>%
set_mode("regression")
# knn_spec <-
#    nearest_neighbor(
#      neighbors = tune()
#      ) %>%
#    set_engine("kknn") %>%
#    set_mode("regression")
library(workflowsets)
wine_workflows <-
workflow_set(
preproc = list(basic = basic_rec, complicated = complicated_rec),
models = list(LM = lm_spec, DT = dt_spec)
)
wine_workflows
grid_ctrl <-
control_grid(
save_pred = TRUE,
parallel_over = "everything",
save_workflow = TRUE
)
grid_results <-
wine_workflows %>%
workflow_map(
seed = 504,
resamples = wine_folds,
grid = 10,
control = grid_ctrl
)
grid_results %>%
rank_results() %>%
filter(.metric == "rmse") %>%
select(model, .config, rmse = mean, rank)
autoplot(
grid_results,
rank_metric = "rmse",  # <- how to order models
metric = "rmse",       # <- which metric to visualize
select_best = TRUE     # <- one point per workflow
)
best_results <-
grid_results %>%
pull_workflow_set_result("basic_DT") %>%
select_best(metric = "rmse")
best_results
test_results <-
grid_results %>%
pull_workflow("basic_DT") %>%
finalize_workflow(best_results) %>%
last_fit(split = data_split)
collect_metrics(test_results)
test_results %>%
collect_predictions() %>%
ggplot(aes(x = lprice, y = .pred)) +
geom_abline(col = "green", lty = 2) +
geom_point(alpha = 0.5) +
coord_obs_pred() +
labs(x = "observed", y = "predicted")
library(stacks)
folds <- vfold_cv(train, v = 3)
metric <- metric_set(rmse)
# ctrl_res <- control_resamples()
library(baguette)
library(baguette)
install.packages("earth")
library(stacks)
folds <- vfold_cv(train, v = 3)
metric <- metric_set(rmse)
# ctrl_res <- control_resamples()
library(baguette)
bag_spec <-
bag_tree() %>%
set_engine("rpart", times = 50L) %>%
set_mode("regression")
wine_wflow <-
workflow() %>%
add_model(bag_spec) %>%
add_recipe(wine_rec)
bag_res <-
fit_resamples(
wine_wflow,
resamples = folds,
metrics = metric,
control = control_stack_resamples()
)
bag_res %>%
collect_metrics()
library(ranger)
rf_spec <-
rand_forest() %>%
set_engine("ranger") %>%
set_mode("regression")
wine_wflow <-
workflow() %>%
add_model(rf_spec) %>%
add_recipe(wine_rec)
rf_res <-
fit_resamples(
wine_wflow,
resamples = folds,
metrics = metric,
control = control_stack_resamples()
)
rf_res %>%
collect_metrics()
xgb_spec <-
boost_tree() %>%
set_engine("xgboost") %>%
set_mode("regression")
wine_wflow <-
workflow() %>%
add_model(xgb_spec) %>%
add_recipe(wine_rec)
xgb_res <-
fit_resamples(
wine_wflow,
resamples = folds,
metrics = metric,
control = control_stack_resamples()
)
install.packages("xgboost")
xgb_spec <-
boost_tree() %>%
set_engine("xgboost") %>%
set_mode("regression")
wine_wflow <-
workflow() %>%
add_model(xgb_spec) %>%
add_recipe(wine_rec)
xgb_res <-
fit_resamples(
wine_wflow,
resamples = folds,
metrics = metric,
control = control_stack_resamples()
)
xgb_res %>%
collect_metrics()
wine_data_st <-
stacks() %>%
add_candidates(bag_res) %>%
add_candidates(rf_res) %>%
add_candidates(xgb_res)
wine_model_st <-
wine_data_st %>%
blend_predictions()
autoplot(wine_model_st, type = "weights")
foodintest <- foodinT
foodintest <- foodinT[-1]
View(foodintest)
foodintest <- foodinT[-c(1,3)]
library(tidymodels)
set.seed(504)
data_split <- initial_split(foodinT, prop = 3/4)
train <- training(data_split)
test  <- testing(data_split)
food_rec <-
recipe(insecure_percen.x ~ ., data = train) %>%
step_BoxCox(all_numeric(), -all_outcomes())
lm_spec <-
linear_reg() %>%
set_engine("lm")
food_wflow <-
workflow() %>%
add_model(lm_spec) %>%
add_recipe(food_rec)
food_fit <- fit(food_wflow, train)
food_fit %>% ## display results
pull_workflow_fit() %>%
tidy()
library(tidymodels)
set.seed(504)
data_split <- initial_split(foodintest, prop = 3/4)
train <- training(data_split)
test  <- testing(data_split)
food_rec <-
recipe(insecure_percen.x ~ ., data = train) %>%
step_BoxCox(all_numeric(), -all_outcomes())
lm_spec <-
linear_reg() %>%
set_engine("lm")
food_wflow <-
workflow() %>%
add_model(lm_spec) %>%
add_recipe(food_rec)
food_fit <- fit(food_wflow, train)
food_fit %>% ## display results
pull_workflow_fit() %>%
tidy()
food_pred <- predict(food_fit, test %>% select(-insecure_percen.x))
head(food_pred)
food_results <- bind_cols(food_pred, test %>% select(insecure_percen.x))
head(food_results)
ggplot(food_results, aes(x = insecure_percen.x, y = .pred)) +
geom_abline(lty = 2) +
geom_point(alpha = 0.5) +
labs(y = "Predicted food insecurity percentage", x = "food insecurity percentage") +
coord_obs_pred()
ggplot(food_results, aes(x = insecure_percen.x, y = .pred)) +
geom_abline(lty = 2) +
labs(y = "Predicted food insecurity percentage", x = "food insecurity percentage") +
coord_obs_pred()
ggplot(food_results, aes(x = insecure_percen.x, y = .pred)) +
geom_abline(lty = 2) +
geom_point() +
labs(y = "Predicted food insecurity percentage", x = "food insecurity percentage") +
coord_obs_pred()
food_metrics <- metric_set(rmse, rsq, mae)
food_metrics(food_results, truth = insecure_percen.x, estimate = .pred)
foodm1 <- predict(food_fit, test) %>%
bind_cols(test %>% select(insecure_percen.x))  %>%
conf_mat(truth = insecure_percen.x, .pred_class)
foodm1 <- predict(food_fit, test) %>%
bind_cols(test %>% select(insecure_percen.x))
foodm1
foodm1 %>% autoplot()
foodm1 <- predict(food_fit, test) %>%
bind_cols(test %>% select(insecure_percen.x))
foodm1
foodm1 %>% summary()
library(caret)
set.seed(504)
m1 <- train(insecure_percen.x ~ .,
data = foodintest,
method = "lm",
trControl = trainControl(number = 1))
summary(m1)
library(modelr)
rmse(m1, foodintest)
library(caret)
set.seed(504)
m1 <- train(insecure_percen.x ~ .,
data = foodintest,
method = "lm",
trControl = trainControl(number = 1)
preProcess = c("BoxCox", "center", "scale"))
library(caret)
set.seed(504)
m1 <- train(insecure_percen.x ~ .,
data = foodintest,
method = "lm",
trControl = trainControl(number = 1),
preProcess = c("BoxCox", "center", "scale"))
summary(m1)
library(modelr)
rmse(m1, foodintest)
ctrl <- trainControl(method = "cv")
fit <- train(insecure_percen.x ~ ., data = foodintest,
method = "rpart",
trControl = ctrl,
metric = "Kappa",
tuneGrid = expand.grid(cp = 0.01))
ctrl <- trainControl(method = "cv")
fit <- train(insecure_percen.x ~ ., data = foodintest,
method = "rpart",
trControl = ctrl,
metric = "RMSE",
tuneGrid = expand.grid(cp = 0.01))
fit
rpart.plot(fit$finalModel, type = 5)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(fit$finalModel, type = 5)
foodintest
View(foodintest)
foodintest1 <- foodintest[-c(4,5)]
library(caret)
# foodintest1 <- foodintest[-c(4,5)]
set.seed(504)
m1 <- train(insecure_percen.x ~ .,
data = foodintest1,
method = "lm",
trControl = trainControl(number = 1),
preProcess = c("BoxCox", "center", "scale"))
summary(m1)
library(modelr)
rmse(m1, foodintest1)
ctrl <- trainControl(method = "cv")
fit <- train(insecure_percen.x ~ ., data = foodintest1,
method = "rpart",
trControl = ctrl,
metric = "RMSE",
tuneGrid = expand.grid(cp = 0.01))
fit
library(rpart.plot)
rpart.plot(fit$finalModel, type = 5)
ctrl <- trainControl(method = "cv")
fit <- train(insecure_percen.x ~ ., data = foodintest1,
method = "rpart",
trControl = ctrl,
metric = "RMSE",
tuneGrid = expand.grid(cp = 0.01),
preProcess = c("BoxCox", "center", "scale"))
fit
library(rpart.plot)
rpart.plot(fit$finalModel, type = 5)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(caret)
library(fastDummies)
library(rpart)
library(rpart.plot)
wine = read_rds("/Users/stuartsuwabe/Downloads/pinot.rds") %>%
mutate(lprice=log(price)) %>%
mutate(fruit=as.integer(str_detect(description,"[Ff]ruit"))) %>%
select(-description, -price, -taster_name)
set.seed(504)
m1 <- train(lprice ~ .,
data = wine,
method = "lm",
trControl = trainControl(number = 1))
summary(m1)
library(modelr)
rmse(m1, wine)
set.seed(504)
m2 <- train(lprice ~ .,
data = wine,
method = "lm",
trControl = trainControl(number = 1),
preProcess = c("BoxCox", "center", "scale"))
summary(m2)
rmse(m2, wine)
set.seed(504)
m3 <- train(lprice ~ fruit*points,
data = wine,
method = "lm",
trControl = trainControl(number = 1))
summary(m3)
ctrl <- trainControl(method = "cv")
foodfit <- train(insecure_percen.x ~ ., data = foodintest1,
method = "rpart",
trControl = ctrl,
metric = "RMSE",
tuneGrid = expand.grid(cp = 0.01),
preProcess = c("BoxCox", "center", "scale"))
foodfit
library(rpart.plot)
rpart.plot(foodfit$finalModel, type = 5)
ctrl <- trainControl(method = "cv")
fit <- train(province ~ ., data = wine,
method = "rpart",
trControl = ctrl,
metric = "Kappa",
tuneGrid = expand.grid(cp = 0.01))
fit
rpart.plot(fit$finalModel, type = 5)
ctrl <- trainControl(method = "cv")
foodfit <- train(insecure_percen.x ~ ., data = foodintest1,
method = "rpart",
trControl = ctrl,
metric = "RMSE",
tuneGrid = expand.grid(cp = 0.01))
foodfit
library(rpart.plot)
rpart.plot(foodfit$finalModel, type = 5)
