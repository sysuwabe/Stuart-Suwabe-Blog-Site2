---
title: "The Make Up Class Assignment"
author: "Stuart Suwabe"
date: "4/14/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidymodels)
library(tidyverse)
wine <- read_rds("/Users/stuartsuwabe/Downloads/pinot.rds")
```

# I will use whether the wine province is Marlborough as my dependent variable. I'll create some features as well. 

```{r}
wine <- wine %>% 
  mutate(province = ifelse(province == "Marlborough", 1, 0)) %>% 
  mutate(province = as.factor(province)) %>%
  mutate(description = tolower(description)) %>% 
  select(-taster_name)

wino <- wine %>% 
  mutate(fp_oak = 0) %>% mutate(fp_oak = replace(fp_oak, str_detect(description, c("dill|smoke|cigar box|baking spices|coconut|vanilla")), 1)) %>% 
  mutate(crisp = str_detect(description, "crisp")) %>% 
  mutate(drink = str_detect(description, "drink")) %>% 
  select(-description)
```

# Now for TidyModels asssembly... starting with building and fitting a logistic regression model. 

```{r}
lr_mod <- 
  logistic_reg() %>% 
  set_engine("glm")
```

# Now we split the data set into training and test sets. 

```{r}
set.seed(504)

data_split <- initial_split(wino, prop = 3/4)

wine_train <- training(data_split)
wine_test  <- testing(data_split)
```

# Now to create a recipe

```{r}
wine_rec <- 
  recipe(province ~ ., data = wine_train) %>% 
  step_BoxCox(all_numeric()) %>% 
  step_zv(all_predictors())
```

# And now the workflow

```{r}
wine_wflow <- 
  workflow() %>% 
  add_model(lr_mod) %>% 
  add_recipe(wine_rec) 
```

# Use the workflow to fit the data. 

```{r}
wine_fit <-
  wine_wflow %>% 
  fit(data = wine_train)

wine_fit %>% 
  pull_workflow_fit() %>% 
  tidy() 
```

# Predict and do a confusion matrix

```{r}
winem1 <- predict(wine_fit, wine_test) %>%
  bind_cols(wine_test %>% select(province))  %>% 
  conf_mat(truth = province, .pred_class)

winem1 
winem1 %>% autoplot()
winem1 %>% summary() 
```

# Now for subsamples and a tuning grid: model specification and workflow for a decision tree.

```{r}
set.seed(504)
folds <- vfold_cv(wine_train, v = 2)

tree_grid <- grid_regular(cost_complexity(),
                          tree_depth(),
                          levels = 5)
# specification
tune_spec <- 
  decision_tree(
    cost_complexity = tune(),
    tree_depth = tune()
  ) %>% 
  set_engine("rpart") %>% 
  set_mode("classification")

# workflow
tree_wf <- workflow() %>%
  add_model(tune_spec) %>%
  add_recipe(wine_rec) 

# compile our results
tree_res <- 
  tree_wf %>% 
  tune_grid(
    resamples = folds,
    grid = tree_grid
    )

tree_res %>% 
  collect_metrics() %>% 
  head(20)
```

# Now we put our tuning into our model. 

```{r}
tree_res %>%
  show_best("roc_auc")

best_tree <- tree_res %>%
  select_best("roc_auc")

final_wf <- 
  tree_wf %>% 
  finalize_workflow(best_tree)

wine_fit <- 
  final_wf %>%
  fit(data = wine_train)
```

# To compare it out of sample... with a confusion matrix! 

```{r}
winem2 <- predict(wine_fit, wine_test) %>%
  bind_cols(wine_test %>% select(province)) %>% 
  conf_mat(truth = province, .pred_class) 

winem2 # we got a few more in true positives and false positives and a slight drop in false negatives and true negatives 
winem2 %>% autoplot()
winem2 %>% summary()
```
